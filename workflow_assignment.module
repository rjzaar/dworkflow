<?php

/**
 * @file
 * Main module file for Workflow Assignment.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;

/**
 * Implements hook_help().
 */
function workflow_assignment_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.workflow_assignment':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides a custom workflow system where you can create workflow lists containing assigned users and groups, with resource locations designated by taxonomy tags. All assignments can be changed on the fly.') . '</p>';
      $output .= '<h3>' . t('Features') . '</h3>';
      $output .= '<ul>';
      $output .= '<li>' . t('Create workflow lists with custom assignments') . '</li>';
      $output .= '<li>' . t('Assign users and/or groups to workflows') . '</li>';
      $output .= '<li>' . t('Tag workflows with resource locations') . '</li>';
      $output .= '<li>' . t('Change assignments on the fly') . '</li>';
      $output .= '<li>' . t('Assign workflows to content') . '</li>';
      $output .= '</ul>';
      return $output;
  }
}

/**
 * Implements hook_entity_operation().
 */
function workflow_assignment_entity_operation(EntityInterface $entity) {
  $operations = [];

  if ($entity->getEntityTypeId() === 'workflow_list') {
    $operations['quick_edit'] = [
      'title' => t('Quick Edit'),
      'url' => Url::fromRoute('workflow_assignment.quick_edit', [
        'workflow_list' => $entity->id(),
      ]),
      'weight' => 50,
    ];
  }

  return $operations;
}

/**
 * Implements hook_node_view().
 */
function workflow_assignment_node_view(array &$build, EntityInterface $entity, $view_mode, $langcode) {
  // Only show workflow info on full view mode
  if ($view_mode !== 'full') {
    return;
  }

  // Check if this content type supports workflow lists
  $config = \Drupal::config('workflow_assignment.settings');
  $allowed_types = $config->get('allowed_content_types') ?: [];
  
  if (!in_array($entity->bundle(), $allowed_types)) {
    return;
  }

  // Get assigned workflow
  if ($entity->hasField('field_workflow_list') && !$entity->get('field_workflow_list')->isEmpty()) {
    $workflow_list_id = $entity->get('field_workflow_list')->value;
    $workflow_list = \Drupal::entityTypeManager()
      ->getStorage('workflow_list')
      ->load($workflow_list_id);

    if ($workflow_list && \Drupal::currentUser()->hasPermission('view workflow lists')) {
      $build['workflow_info'] = [
        '#type' => 'details',
        '#title' => t('Workflow Information'),
        '#open' => FALSE,
        '#weight' => 100,
      ];

      $build['workflow_info']['name'] = [
        '#markup' => '<p><strong>' . t('Workflow:') . '</strong> ' . $workflow_list->label() . '</p>',
      ];

      // Show assigned users
      $users = $workflow_list->getAssignedUsers();
      if (!empty($users)) {
        $user_entities = \Drupal::entityTypeManager()
          ->getStorage('user')
          ->loadMultiple($users);
        $user_names = array_map(function($user) {
          return $user->getDisplayName();
        }, $user_entities);

        $build['workflow_info']['users'] = [
          '#markup' => '<p><strong>' . t('Assigned To:') . '</strong> ' . 
                       implode(', ', $user_names) . '</p>',
        ];
      }

      // Show resource locations
      $tags = $workflow_list->getResourceTags();
      if (!empty($tags)) {
        $terms = \Drupal::entityTypeManager()
          ->getStorage('taxonomy_term')
          ->loadMultiple($tags);
        $tag_names = array_map(function($term) {
          return $term->getName();
        }, $terms);

        $build['workflow_info']['resources'] = [
          '#markup' => '<p><strong>' . t('Resource Locations:') . '</strong> ' . 
                       implode(', ', $tag_names) . '</p>',
        ];
      }
    }
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function workflow_assignment_entity_type_alter(array &$entity_types) {
  // Add local task for assigning workflow to nodes
  if (isset($entity_types['node'])) {
    $entity_types['node']->setLinkTemplate('workflow-assign', '/node/{node}/assign-workflow');
  }
}
